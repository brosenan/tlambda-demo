{"tlambda"
 {;; Use an Instaparser
  :parser :insta
  ;; The grammar with a layout section
  :grammar "compilation_unit = import* def*
            
            import = <'import'> dep <';'>
            dep = #'[a-z][a-z_0-9]*([.][a-z][a-z_0-9]*)*'
            
            <def> = typed_definition | public_def | type_def | type_alias_def |
                    primitive_def
            typed_definition = identifier <':'> type <'='> expr <';'>
            definition = identifier <'='> expr <';'>
            public_def = <'public'> definition
            type_def = <'type'> identifier <';'>
            type_alias_def = <'type'> identifier <'='> type <';'>
            primitive_def = identifier <':'> type <';'>

            <type> = func_type | type1
            <type1> = type_alias | <'('> type <')'>
            func_type = type1 <'->'> type
            type_alias = identifier
            
            expr =  lambda_abst | app_expr
            <app_expr> = func_application | arg_expr
            <arg_expr> = identifier | <'('> expr <')'>

            lambda_abst = <'\\\\'> params <'.'> expr
            params = identifier+

            func_application = app_expr arg_expr
            
            identifier = #'[a-zA-Z_][a-zA-Z_0-9]*'
            
            --layout--
            layout = (#'\\s' | #'--.*')+"
  ;; The keyword (or keywords) representing an identifier in the grammar
  :identifier-kws :identifier
  ;; The keyword representing a dependency module name in the grammar
  :dependency-kw :dep
  ;; The resolver is based on a prefix list
  :resolver :prefix-list
  ;; The path relative to the prefixes is based on dots in the module name
  ;; (e.g., a.b.c => a/b/c.ext)
  :relative-path-resolution :dots
  ;; The file extension for the source files
  :file-ext "tlambda"
  ;; The modules that define the language's semantics
  :y0-modules ["tlambda"]
  ;; Read files using Clojure's slurp function.
  :reader :slurp
  ;; Stringify by extracting text from the source file
  :expr-stringifier :extract-text
  ;; Decorate the tree
  :decorate :true
  ;; Language stylesheet
  :stylesheet [{}]}}